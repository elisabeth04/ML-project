natural-language programming (nlp) is an ontology-assisted way of programming in terms of natural-language sentences, e.g. english. a structured document with content, sections and subsections for explanations of sentences forms a nlp document, which is actually a computer program. natural language programming is not to be mixed up with natural language interfacing or voice control where a program is first written and then communicated with through natural language using an interface added on. in nlp the functionality of a program is organised only for the definition of the meaning of sentences. for instance, nlp can be used to represent all the knowledge of an autonomous robot. having done so,  it's tasks can be scripted by its users so that the robot can execute them autonomously while keeping to prescribed rules of behaviour as determined by the robot's user. such robots are called transparent robots  as their reasoning  is transparent to users and this develops trust in robots.   natural language use and natural-language user interfaces include inform 7, a natural programming language for making interactive fiction, shakespeare, an esoteric natural programming language in the style of the plays of william shakespeare, and wolfram alpha, a computational knowledge engine, using natural-language input. some methods for program synthesis are based on natural-language programming.


== interpretation ==
the smallest unit of statement in nlp is a sentence.  each sentence is stated in terms of concepts from the underlying ontology, attributes in that ontology and named objects in capital letters.  in an nlp text every sentence unambiguously compiles into a procedure call in the underlying high-level programming language such as matlab, octave, scilab, python, etc.
symbolic languages such as wolfram language are capable of interpreted processing of queries by sentences. this can allow interactive requests such as that implemented in wolfram alpha. the difference between these and nlp is that the latter builds up a single program or a library of routines that are programmed through natural language sentences using an ontology that defines the available data structures in a high level programming language.
an example text from an english language natural-language program is as follows:

 if  u_ is 'smc01-control',  then do the following. define surface weights alpha as "[0.5, 0.5]".
 initialise matrix phi as a 'unit matrix'. define j as the 'inertia matrix' of spc01. compute
 matrix j2 as the inverse of j.  compute position velocity error ve and angular velocity error
 oe from dynamical state x, guidance reference xnow.   define the joint sliding surface g2
 from the position velocity error ve and angular velocity error oe using the surface weights
 alpha. compute the smoothed sign function sg2 from the joint sliding surface g2 with sign
 threshold 0.01.  compute special dynamical force f from dynamical state x and surface
 weights alpha.  compute control torque t and control force u from matrix j2, surface weights
 alpha, special dynamical force f, smoothed sign function sg2.  finish conditional actions.

that defines a feedback control scheme using a sliding mode control method.


== software paradigm ==
natural-language programming is a top-down method of writing software. its stages are as follows:

definition of an ontology –  taxonomy –  of concepts needed to describe tasks in the topic addressed. each concept and all their attributes are defined in natural-language words. this ontology will define the data structures the nlp can use in sentences.
definition of one or more top-level sentences in terms of concepts from the ontology. these sentences are later used to invoke the most important activities in the topic.
defining of each of the top-level sentences in terms of a sequence of sentences.
defining each of the lower-level sentences in terms of other sentences or by a simple sentence of the form  execute code "...".  where ... stands for a code in terms of the associated high-level programming language.
repeating the previous step until you have no sentences left undefined. during this process each of sentences can be classified to belong to a section of the document to be produced in html or latex format to form the final natural-language program.
testing the meaning of each sentence by executing its code using testing objects.
providing a library of procedure calls (in the underlying high-level language) which are needed in the code definitions of some low-level-sentence meanings.
providing a title, author data and compiling the sentences into an html or latex file.
publishing the natural-language program as a webpage on the internet or as a pdf file compiled from the latex document.


== publication value of natural-language programs and documents ==
a natural-language program is a precise formal description of some procedure that its author created. it is human readable and it can also be read by a suitable software agent.  for example, a web page in an nlp format can be read by a software personal assistant agent to a person and she or he can ask the agent to execute some sentences, i.e. carry out some task or answer a question. there is a reader agent available for english interpretation of html based nlp documents that a person can run on her personal computer .


== contribution of natural-language programs to machine knowledge ==
an ontology class is a natural-language program that is not a concept in the sense as humans use concepts. concepts in an nlp are examples (samples) of generic human concepts. each sentence in a natural-language program is either (1) stating a relationship in a world model or (2) carries out an action in the environment or (3) carries out a computational procedure or (4) invokes an answering mechanism in response to a question.
a set of nlp sentences, with associated ontology defined, can also be used as a pseudo code that does not provide the details in any underlying high level programming language. in such an application the sentences used become high level abstractions (conceptualisations) of computing procedures that are computer language and machine independent.


== see also ==
controlled natural language
context-free language
domain-specific language (or dsl)
end-user programming
knowledge representation
natural-language processing
source-code generation
very high-level programming languageprogramming languages with english-like syntax
applescript
attempto controlled english
cobol
cleartalk
flow-matic
hypertalk
inform 7
joss
sensetalk
software ag
transcript
structured query language (or sql)
xtalk


== references ==


== bibliography ==
books
natural language programming of agents and robotic devices:  publishing for agents and humans in senglish by s m veres, isbn 978-0-9558417-0-5, london, june 2008.
dijkstra, edsger w. (1979). "on the foolishness of "natural language programming"". program construction. lecture notes in computer science. vol. 69. pp. 51–53. doi:10.1007/bfb0014656. isbn 3-540-09251-x.
lieberman, henry; liu, hugo (2006). "feasibility studies for programming in natural language". end user development. human-computer interaction series. vol. 9. pp. 459–473. doi:10.1007/1-4020-5386-x_20. isbn 978-1-4020-4220-1.
halpern, mark (1990). "natural language and redundancy in programming". binding time: six studies in programming technology & milieu. ablex series in computational science. intellect books. isbn 9780893916916.papers at conferences
veres, s.m.; molnar, l. (2010). "documents for intelligent agents in english". artificial intelligence and applications. doi:10.2316/p.2010.674-122. isbn 978-0-88986-817-5.
sliding mode control of autonomous spacecraft. (half written in senglish) by s m veres an n k lincoln, proc. taros’2008, towards autonomous robotic systems, edinburgh, 1–3 september 2008.
veres, sandor m. (2010). "mission capable autonomous control systems in the oceans, in the air and in space". brain-inspired information technology. studies in computational intelligence. vol. 266. pp. 1–10. doi:10.1007/978-3-642-04025-2_1. isbn 978-3-642-04024-5.
pulido-prieto, oscar; juárez-martínez, ulises (2017). "a survey of naturalistic programming technologies". acm computing surveys. 50 (5): 1–35. doi:10.1145/3109481. s2cid 2078759.program synthesis from natural language specificationsraza, mohammad, sumit gulwani, and natasa milic-frayling. "compositional program synthesis from natural language and examples." ijcai. 2015.
green, cordell. "a summary of the psi program synthesis system." ijcai. vol. 5. 1977.


== external links ==
english script (dormant since 2016)
plain english programming programming language using english sentences in ascii.
sempre  –  a toolkit for training semantic parsers
sysbrain.com  –  senglish editor in c++/ros for robot programming to develop transparent robots.
wy-lang.org  –  "programming language for the ancient chinese"
how natural should a natural interface be? –  thoughts on how "natural" the ubiquity interface (dormant since 2009)
metafor turns english to code (dormant since 2005)
computer knowledge representation format, system, methods, and applications –  us patent re: hyperlinking to .who/what/where/when/how xml files that embed nl
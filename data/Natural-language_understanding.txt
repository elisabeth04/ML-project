natural-language understanding (nlu) or natural-language interpretation (nli) is a subtopic  of natural-language processing in artificial intelligence that deals with machine reading comprehension. natural-language understanding is considered an ai-hard problem.there is considerable commercial interest in the field because of its application to automated reasoning, machine translation, question answering, news-gathering, text categorization, voice-activation, archiving, and large-scale content analysis.


== history ==
the program student, written in 1964 by daniel bobrow for his phd dissertation at mit, is one of the earliest known attempts at natural-language understanding by a computer.  eight years after john mccarthy coined the term artificial intelligence, bobrow's dissertation (titled natural language input for a computer problem solving system) showed how a computer could understand simple natural language input to solve algebra word problems.
a year later, in 1965, joseph weizenbaum at mit wrote eliza, an interactive program that carried on a dialogue in english on any topic, the most popular being psychotherapy. eliza worked by simple parsing and substitution of key words into canned phrases and weizenbaum sidestepped the problem of giving the program a database of real-world knowledge or a rich lexicon. yet eliza gained surprising popularity as a toy project and can be seen as a very early precursor to current commercial systems such as those used by ask.com.in 1969 roger schank at stanford university introduced the conceptual dependency theory for natural-language understanding. this model, partially influenced by the work of sydney lamb, was extensively used by schank's students at yale university, such as robert wilensky, wendy lehnert, and janet kolodner.
in 1970, william a. woods introduced the augmented transition network (atn) to represent natural language input. instead of phrase structure rules atns used an equivalent set of finite state automata that were called recursively. atns and their more general format called "generalized atns" continued to be used for a number of years.
in 1971 terry winograd finished writing shrdlu for his phd thesis at mit. shrdlu could understand simple english sentences in a restricted world of children's blocks to direct a robotic arm to move items. the successful demonstration of shrdlu provided significant momentum for continued research in the field. winograd continued to be a major influence in the field with the publication of his book language as a cognitive process. at stanford, winograd would later advise larry page, who co-founded google.
in the 1970s and 1980s the natural language processing group at sri international continued research and development in the field. a number of commercial efforts based on the research were undertaken, e.g., in 1982 gary hendrix formed symantec corporation originally as a company for developing a natural language interface for database queries on personal computers. however, with the advent of mouse-driven graphical user interfaces, symantec changed direction. a number of other commercial efforts were started around the same time, e.g., larry r. harris at the artificial intelligence corporation and roger schank and his students at cognitive systems corp. in 1983, michael dyer developed the boris system at yale which bore similarities to the work of roger schank and w. g. lehnert.the third millennium saw the introduction of systems using machine learning for text classification, such as the ibm watson. however, experts debate how much "understanding" such systems demonstrate: e.g., according to john searle, watson did not even understand the questions.john ball, cognitive scientist and inventor of patom theory, supports this assessment. natural language processing has made inroads for applications to support human productivity in service and ecommerce, but this has largely been made possible by narrowing the scope of the application. there are thousands of ways to request something in a human language that still defies conventional natural language processing. "to have a meaningful conversation with machines is only possible when we match every word to the correct meaning based on the meanings of the other words in the sentence â€“ just like a 3-year-old does without guesswork."


== scope and context ==
the umbrella term "natural-language understanding" can be applied to a diverse set of computer applications, ranging from small, relatively simple tasks such as short commands issued to robots, to highly complex endeavors such as the full comprehension of newspaper articles or poetry passages. many real-world applications fall between the two extremes, for instance text classification for the automatic analysis of emails and their routing to a suitable department in a corporation does not require an in-depth understanding of the text, but needs to deal with a much larger vocabulary and more diverse syntax than the management of simple queries to database tables with fixed schemata.
throughout the years various attempts at processing natural language or english-like sentences presented to computers have taken place at varying degrees of complexity. some attempts have not resulted in systems with deep understanding, but have helped overall system usability. for example, wayne ratliff originally developed the vulcan program with an english-like syntax to mimic the english speaking computer in star trek. vulcan later became the dbase system whose easy-to-use syntax effectively launched the personal computer database industry. systems with an easy to use or english like syntax are, however, quite distinct from systems that use a rich lexicon and include an internal representation (often as first order logic) of the semantics of natural language sentences.
hence the breadth and depth of "understanding" aimed at by a system determine both the complexity of the system (and the implied challenges) and the types of applications it can deal with.  the "breadth" of a system is measured by the sizes of its vocabulary and grammar.  the "depth" is measured by the degree to which its understanding approximates that of a fluent native speaker.  at the narrowest and shallowest, english-like command interpreters require minimal complexity, but have a small range of applications.  narrow but deep systems explore and model mechanisms of understanding, but they still have limited application.  systems that attempt to understand the contents of a document such as a news release beyond simple keyword matching and to judge its suitability for a user are broader and require significant complexity, but they are still somewhat shallow.  systems that are both very broad and very deep are beyond the current state of the art.


== components and architecture ==
regardless of the approach used, most natural-language-understanding systems share some common components. the system needs a lexicon of the language and a parser and grammar rules to break sentences into an internal representation. the construction of a rich lexicon with a suitable ontology requires significant effort, e.g., the wordnet lexicon required many person-years of effort.the system also needs theory from semantics to guide the comprehension. the interpretation capabilities of a language-understanding system depend on the semantic theory it uses. competing semantic theories of language have specific trade-offs in their suitability as the basis of computer-automated semantic interpretation. these range from naive semantics or stochastic semantic analysis to the use of pragmatics to derive meaning from context. semantic parsers convert natural-language texts into formal meaning representations.advanced applications of natural-language understanding also attempt to incorporate logical inference within their framework. this is generally achieved by mapping the derived meaning into a set of assertions in predicate logic, then using logical deduction to arrive at conclusions. therefore, systems based on functional languages such as lisp need to include a subsystem to represent logical assertions, while logic-oriented systems such as those using the language prolog generally rely on an extension of the built-in logical representation framework.the management of context in natural-language understanding can present special challenges. a large variety of examples and counter examples have resulted in multiple approaches to the formal modeling of context, each with specific strengths and weaknesses.


== see also ==
computational semantics
computational linguistics
discourse representation theory
deep linguistic processing
history of natural language processing
information extraction
mathematica
natural language processing
natural language programming
natural language user interface
siri (software)
wolfram alpha
open information extraction
part-of-speech tagging
speech recognition


== notes ==
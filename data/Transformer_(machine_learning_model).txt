a transformer is a deep learning model that adopts the mechanism of self-attention, differentially weighting the significance of each part of the input data. it is used primarily in the fields of natural language processing (nlp) and computer vision (cv).like recurrent neural networks (rnns), transformers are designed to handle sequential input data, such as natural language, for tasks such as translation and text summarization. however, unlike rnns, transformers do not necessarily process the data in order. rather, the attention mechanism provides context for any position in the input sequence. for example, if the input data is a natural language sentence, the transformer does not need to process the beginning of the sentence before the end. rather it identifies the context that confers meaning to each word in the sentence. this feature allows for more parallelization than rnns and therefore reduces training times.transformers were introduced in 2017 by a team at google brain and are increasingly the model of choice for nlp problems, replacing rnn models such as long short-term memory (lstm). the additional training parallelization allows training on larger datasets than was once possible. this led to the development of pretrained systems such as bert (bidirectional encoder representations from transformers) and gpt (generative pre-trained transformer), which were trained with large language datasets, such as the wikipedia corpus and common crawl, and can be fine-tuned for specific tasks.


== background ==
before transformers, most state-of-the-art nlp systems relied on gated rnns, such as lstm and gated recurrent units (grus), with added attention mechanisms. transformers are built on these attention technologies without using an rnn structure, highlighting the fact that attention mechanisms alone can match the performance of rnns with attention.


=== sequential processing ===
gated rnns process tokens sequentially, maintaining a state vector that contains a representation of the data seen after every token. to process the 
  
    
      
        n
      
    
    {\textstyle n}
  th token, the model combines the state representing the sentence up to token 
  
    
      
        n
        −
        1
      
    
    {\textstyle n-1}
   with the information of the new token to create a new state, representing the sentence up to token 
  
    
      
        n
      
    
    {\textstyle n}
  . theoretically, the information from one token can propagate arbitrarily far down the sequence, if at every point the state continues to encode contextual information about the token. in practice this mechanism is flawed: the vanishing gradient problem leaves the model's state at the end of a long sentence without precise, extractable information about preceding tokens.
the dependency of token computations on results of previous token computations also makes it hard to parallelize computation on modern deep learning hardware. this can make the training of rnns inefficient.


=== attention ===
these problems were addressed by attention mechanisms. attention mechanisms let a model draw from the state at any preceding point along the sequence. the attention layer can access all previous states and weigh them according to a learned measure of relevancy, providing relevant information about far-away tokens.
a clear example of the value of attention is in language translation, where context is essential to assign the meaning of a word in a sentence. in an english-to-french translation system, the first word of the french output most probably depends heavily on the first few words of the english input. however, in a classic lstm model, in order to produce the first word of the french output, the model is given only the state vector of the last english word. theoretically, this vector can encode information about the whole english sentence, giving the model all necessary knowledge. in practice, this information is often poorly preserved by the lstm. an attention mechanism can be added to address this problem: the decoder is given access to the state vectors of every english input word, not just the last, and can learn attention weights that dictate how much to attend to each english input state vector.
when added to rnns, attention mechanisms increase performance. the development of the transformer architecture revealed that attention mechanisms were powerful in themselves and that sequential recurrent processing of data was not necessary to achieve the quality gains of rnns with attention. transformers use an attention mechanism without an rnn, processing all tokens at the same time and calculating attention weights between them in successive layers.
since the attention mechanism only uses information about other tokens from lower layers, it can be computed for all tokens in parallel, which leads to improved training speed.


== architecture ==


=== encoder-decoder architecture ===
like earlier seq2seq models, the original transformer model used an encoder-decoder architecture. the encoder consists of encoding layers that process the input iteratively one layer after another, while the decoder consists of decoding layers that do the same thing to the encoder's output.
the function of each encoder layer is to generate encodings that contain information about which parts of the inputs are relevant to each other. it passes its encodings to the next encoder layer as inputs. each decoder layer does the opposite, taking all the encodings and using their incorporated contextual information to generate an output sequence. to achieve this, each encoder and decoder layer makes use of an attention mechanism.
for each input, attention weighs the relevance of every other input and draws from them to produce the output. each decoder layer has an additional attention mechanism that draws information from the outputs of previous decoders, before the decoder layer draws information from the encodings.
both the encoder and decoder layers have a feed-forward neural network for additional processing of the outputs and contain residual connections and layer normalization steps.


=== scaled dot-product attention ===
the transformer building blocks are scaled dot-product attention units. when a sentence is passed into a transformer model, attention weights are calculated between every token simultaneously. the attention unit produces embeddings for every token in context that contain information about the token itself along with a weighted combination of other relevant tokens each weighted by its attention weight.
for each attention unit the transformer model learns three weight matrices; the query weights 
  
    
      
        
          w
          
            q
          
        
      
    
    {\displaystyle w_{q}}
  , the key weights 
  
    
      
        
          w
          
            k
          
        
      
    
    {\displaystyle w_{k}}
  , and the value weights 
  
    
      
        
          w
          
            v
          
        
      
    
    {\displaystyle w_{v}}
  . for each token 
  
    
      
        i
      
    
    {\displaystyle i}
  , the input word embedding 
  
    
      
        
          x
          
            i
          
        
      
    
    {\displaystyle x_{i}}
   is multiplied with each of the three weight matrices to produce a query vector 
  
    
      
        
          q
          
            i
          
        
        =
        
          x
          
            i
          
        
        
          w
          
            q
          
        
      
    
    {\displaystyle q_{i}=x_{i}w_{q}}
  , a key vector 
  
    
      
        
          k
          
            i
          
        
        =
        
          x
          
            i
          
        
        
          w
          
            k
          
        
      
    
    {\displaystyle k_{i}=x_{i}w_{k}}
  , and a value vector 
  
    
      
        
          v
          
            i
          
        
        =
        
          x
          
            i
          
        
        
          w
          
            v
          
        
      
    
    {\displaystyle v_{i}=x_{i}w_{v}}
  . attention weights are calculated using the query and key vectors: the attention weight 
  
    
      
        
          a
          
            i
            j
          
        
      
    
    {\displaystyle a_{ij}}
   from token 
  
    
      
        i
      
    
    {\displaystyle i}
   to token 
  
    
      
        j
      
    
    {\displaystyle j}
   is the dot product between 
  
    
      
        
          q
          
            i
          
        
      
    
    {\displaystyle q_{i}}
   and 
  
    
      
        
          k
          
            j
          
        
      
    
    {\displaystyle k_{j}}
  . the attention weights are divided by the square root of the dimension of the key vectors, 
  
    
      
        
          
            
              d
              
                k
              
            
          
        
      
    
    {\displaystyle {\sqrt {d_{k}}}}
  , which stabilizes gradients during training, and passed through a softmax which normalizes the weights. the fact that 
  
    
      
        
          w
          
            q
          
        
      
    
    {\displaystyle w_{q}}
   and 
  
    
      
        
          w
          
            k
          
        
      
    
    {\displaystyle w_{k}}
   are different matrices allows attention to be non-symmetric: if token 
  
    
      
        i
      
    
    {\displaystyle i}
   attends to token 
  
    
      
        j
      
    
    {\displaystyle j}
   (i.e. 
  
    
      
        
          q
          
            i
          
        
        ⋅
        
          k
          
            j
          
        
      
    
    {\displaystyle q_{i}\cdot k_{j}}
   is large), this does not necessarily mean that token 
  
    
      
        j
      
    
    {\displaystyle j}
   will attend to token 
  
    
      
        i
      
    
    {\displaystyle i}
   (i.e. 
  
    
      
        
          q
          
            j
          
        
        ⋅
        
          k
          
            i
          
        
      
    
    {\displaystyle q_{j}\cdot k_{i}}
   could be small).  the output of the attention unit for token 
  
    
      
        i
      
    
    {\displaystyle i}
   is the weighted sum of the value vectors of all tokens, weighted by 
  
    
      
        
          a
          
            i
            j
          
        
      
    
    {\displaystyle a_{ij}}
  , the attention from token 
  
    
      
        i
      
    
    {\displaystyle i}
   to each token.
the attention calculation for all tokens can be expressed as one large matrix calculation using the softmax function, which is useful for training due to computational matrix operation optimizations that quickly compute matrix operations. the matrices 
  
    
      
        q
      
    
    {\displaystyle q}
  , 
  
    
      
        k
      
    
    {\displaystyle k}
   and 
  
    
      
        v
      
    
    {\displaystyle v}
   are defined as the matrices where the 
  
    
      
        i
      
    
    {\displaystyle i}
  th rows are vectors 
  
    
      
        
          q
          
            i
          
        
      
    
    {\displaystyle q_{i}}
  , 
  
    
      
        
          k
          
            i
          
        
      
    
    {\displaystyle k_{i}}
  , and 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
   respectively.

  
    
      
        
          
            
              
                
                  attention
                
                (
                q
                ,
                k
                ,
                v
                )
                =
                
                  softmax
                
                
                  (
                  
                    
                      
                        q
                        
                          k
                          
                            
                              t
                            
                          
                        
                      
                      
                        
                          d
                          
                            k
                          
                        
                      
                    
                  
                  )
                
                v
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}{\text{attention}}(q,k,v)={\text{softmax}}\left({\frac {qk^{\mathrm {t} }}{\sqrt {d_{k}}}}\right)v\end{aligned}}}
  


==== multi-head attention ====
one set of 
  
    
      
        
          (
          
            
              w
              
                q
              
            
            ,
            
              w
              
                k
              
            
            ,
            
              w
              
                v
              
            
          
          )
        
      
    
    {\displaystyle \left(w_{q},w_{k},w_{v}\right)}
   matrices is called an attention head, and each layer in a transformer model has multiple attention heads. while each attention head attends to the tokens that are relevant to each token, with multiple attention heads the model can do this for different definitions of "relevance". in addition the influence field representing relevance can become progressively dilated in successive layers. many transformer attention heads encode relevance relations that are meaningful to humans. for example, attention heads can attend mostly to the next word, while others  mainly attend from verbs to their direct objects. the computations for each attention head can be performed in parallel, which allows for fast processing. the outputs for the attention layer are concatenated to pass into the feed-forward neural network layers.


=== encoder ===
each encoder consists of two major components: a self-attention mechanism and a feed-forward neural network. the self-attention mechanism accepts input encodings from the previous encoder and weighs their relevance to each other to generate output encodings. the feed-forward neural network further processes each output encoding individually. these output encodings are then passed to the next encoder as its input, as well as to the decoders.
the first encoder takes positional information and embeddings of the input sequence as its input, rather than encodings. the positional information is necessary for the transformer to make use of the order of the sequence, because no other part of the transformer makes use of this.


=== decoder ===
each decoder consists of three major components: a self-attention mechanism, an attention mechanism over the encodings, and a feed-forward neural network. the decoder functions in a similar fashion to the encoder, but an additional attention mechanism is inserted which instead draws relevant information from the encodings generated by the encoders.like the first encoder, the first decoder takes positional information and embeddings of the output sequence as its input, rather than encodings. the transformer must not use the current or future output to predict an output, so the output sequence must be partially masked to prevent this reverse information flow. the last decoder is followed by a final linear transformation and softmax layer, to produce the output probabilities over the vocabulary.


=== alternatives ===
training transformer-based architectures can be expensive, especially for long inputs. alternative architectures include the reformer (which reduces the computational load from 
  
    
      
        o
        (
        
          n
          
            2
          
        
        )
      
    
    {\displaystyle o(n^{2})}
   to 
  
    
      
        o
        (
        n
        ln
        ⁡
        n
        )
      
    
    {\displaystyle o(n\ln n)}
  ), or models like etc/bigbird (which can reduce it to 
  
    
      
        o
        (
        n
        )
      
    
    {\displaystyle o(n)}
  ) where 
  
    
      
        n
      
    
    {\displaystyle n}
   is the length of the sequence. this is done using locality-sensitive hashing and reversible layers.a benchmark for comparing transformer architectures was introduced in late 2020.


== training ==
transformers typically undergo semi-supervised learning involving unsupervised pretraining followed by supervised fine-tuning. pretraining is typically done on a larger dataset than fine-tuning, due to the limited availability of labeled training data. tasks for pretraining and fine-tuning commonly include:

language modeling
next-sentence prediction
question answering
reading comprehension
sentiment analysis
paraphrasing


== applications ==
the transformer has had great success in natural language processing (nlp), for example the tasks of machine translation and time series prediction.  many pretrained models such as gpt-2, gpt-3, bert, xlnet, and roberta demonstrate the ability of transformers to perform a wide variety of such nlp-related tasks, and have the potential to find real-world applications. these may include:

machine translation
document summarization
document generation
named entity recognition (ner)
biological sequence analysis
video understanding.in 2020, it was shown that the transformer architecture, more specifically gpt-2, could be tuned to play chess. transformers have been applied to image processing with results competitive with convolutional neural networks.


== implementations ==
the transformer model has been implemented in standard deep learning frameworks such as tensorflow and pytorch.
transformers is a library produced by hugging face that supplies transformer-based architectures and pretrained models.


== see also ==
perceiver
gpt-3
wu dao
vision transformers


== references ==


== further reading ==
hubert ramsauer et al. (2020), "hopfield networks is all you need", preprint submitted for iclr 2021. arxiv:2008.02217; see also authors' blog– discussion of the effect of a transformer layer as equivalent to a hopfield update, bringing the input closer to one of the fixed points (representable patterns) of a continuous-valued hopfield network


== external links ==
alexander rush, the annotated transformer, harvard nlp group, 3 april 2018
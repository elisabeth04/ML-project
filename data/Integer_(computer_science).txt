in computer science, an integer is a datum of integral data type, a data type that represents some range of mathematical integers. integral data types may be of different sizes and may or may not be allowed to contain negative values. integers are commonly represented in a computer as a group of binary digits (bits). the size of the grouping varies so the set of integer sizes available varies between different types of computers. computer hardware nearly always provides a way to represent a processor register or memory address as an integer.


== value and representation ==
the value of an item with an integral type is the mathematical integer that it corresponds to. integral types may be unsigned (capable of representing only non-negative integers) or signed (capable of representing negative integers as well).an integer value is typically specified in the source code of a program as a sequence of digits optionally prefixed with + or −. some programming languages allow other notations, such as hexadecimal (base 16) or octal (base 8). some programming languages also permit digit group separators.the internal representation of this datum is the way the value is stored in the computer's memory. unlike mathematical integers, a typical datum in a computer has some minimal and maximum possible value.
the most common representation of a positive integer is a string of bits, using the binary numeral system. the order of the memory bytes storing the bits varies; see endianness. the width or precision of an integral type is the number of bits in its representation. an integral type with n bits can encode 2n numbers; for example an unsigned type typically represents the non-negative values 0 through 2n−1. other encodings of integer values to bit patterns are sometimes used, for example binary-coded decimal or gray code, or as printed character codes such as ascii.
there are four well-known ways to represent signed numbers in a binary computing system. the most common is two's complement, which allows a signed integral type with n bits to represent numbers from −2(n−1) through 2(n−1)−1. two's complement arithmetic is convenient because there is a perfect one-to-one correspondence between representations and values (in particular, no separate +0 and −0), and because addition, subtraction and multiplication do not need to distinguish between signed and unsigned types. other possibilities include offset binary, sign-magnitude, and ones' complement.
some computer languages define integer sizes in a machine-independent way; others have varying definitions depending on the underlying processor word size. not all language implementations define variables of all integer sizes, and defined sizes may not even be distinct in a particular implementation. an integer in one programming language may be a different size in a different language or on a different processor.


== common integral data types ==
different cpus support different integral data types. typically, hardware will support both signed and unsigned types, but only a small, fixed set of widths.
the table above lists integral type widths that are supported in hardware by common processors. high level programming languages provide more possibilities. it is common to have a 'double width' integral type that has twice as many bits as the biggest hardware-supported type. many languages also have bit-field types (a specified number of bits, usually constrained to be less than the maximum hardware-supported width) and range types (that can represent only the integers in a specified range).
some languages, such as lisp, smalltalk, rexx, haskell, python, and raku support arbitrary precision integers (also known as infinite precision integers or bignums). other languages that do not support this concept as a top-level construct may have libraries available to represent very large numbers using arrays of smaller variables, such as java's biginteger class or perl's "bigint" package. these use as much of the computer's memory as is necessary to store the numbers; however, a computer has only a finite amount of storage, so they too can only represent a finite subset of the mathematical integers. these schemes support very large numbers, for example one kilobyte of memory could be used to store numbers up to 2466 decimal digits long.
a boolean or flag type is a type that can represent only two values: 0 and 1, usually identified with false and true respectively.  this type can be stored in memory using a single bit, but is often given a full byte for convenience of addressing and speed of access.
a four-bit quantity is known as a nibble (when eating, being smaller than a bite) or nybble (being a pun on the form of the word byte). one nibble corresponds to one digit in hexadecimal and holds one digit or a sign code in binary-coded decimal.


=== bytes and octets ===

the term byte initially meant 'the smallest addressable unit of memory'. in the past, 5-, 6-, 7-, 8-, and 9-bit bytes have all been used. there have also been computers that could address individual bits ('bit-addressed machine'), or that could only address 16- or 32-bit quantities ('word-addressed machine'). the term byte was usually not used at all in connection with bit- and word-addressed machines.
the term octet always refers to an 8-bit quantity. it is mostly used in the field of computer networking, where computers with different byte widths might have to communicate.
in modern usage byte almost invariably means eight bits, since all other sizes have fallen into disuse; thus byte has come to be synonymous with octet.


=== words ===

the term 'word' is used for a small group of bits that are handled simultaneously by processors of a particular architecture. the size of a word is thus cpu-specific. many different word sizes have been used, including 6-, 8-, 12-, 16-, 18-, 24-, 32-, 36-, 39-, 40-, 48-, 60-, and 64-bit. since it is architectural, the size of a word is usually set by the first cpu in a family, rather than the characteristics of a later compatible cpu. the meanings of terms derived from word, such as longword, doubleword, quadword, and halfword, also vary with the cpu and os.practically all new desktop processors are capable of using 64-bit words, though embedded processors with 8- and 16-bit word size are still common. the 36-bit word length was common in the early days of computers.
one important cause of non-portability of software is the incorrect assumption that all computers have the same word size as the computer used by the programmer. for example, if a programmer using the c language incorrectly declares as int a variable that will be used to store values greater than 215−1, the program will fail on computers with 16-bit integers. that variable should have been declared as long, which has at least 32 bits on any computer. programmers may also incorrectly assume that a pointer can be converted to an integer without loss of information, which may work on (some) 32-bit computers, but fail on 64-bit computers with 64-bit pointers and 32-bit integers. this issue is resolved by c99 in stdint.h in the form of intptr_t.


=== short integer ===
a short integer can represent a whole number that may take less storage, while having a smaller range, compared with a standard integer on the same machine.
in c, it is denoted by short. it is required to be at least 16 bits, and is often smaller than a standard integer, but this is not required. a conforming program can assume that it can safely store values between −(215−1) and 215−1, but it may not assume that the range isn't larger. in java, a short is always a 16-bit integer. in the windows api, the datatype short is defined as a 16-bit signed integer on all machines.


=== long integer ===
a long integer can represent a whole integer whose range is greater than or equal to that of a standard integer on the same machine.
in c, it is denoted by long. it is required to be at least 32 bits, and may or may not be larger than a standard integer. a conforming program can assume that it can safely store values between −(231−1) and 231−1, but it may not assume that the range isn't larger.


=== long long ===

in the c99 version of the c programming language and the c++11 version of c++, a long long type is supported that has double the minimum capacity of the standard long. this type is not supported by compilers that require c code to be compliant with the previous c++ standard, c++03, because the long long type did not exist in c++03. for an ansi/iso compliant compiler, the minimum requirements for the specified ranges, that is, −(263−1) to 263−1 for signed and 0 to 264−1 for unsigned, must be fulfilled; however, extending this range is permitted. this can be an issue when exchanging code and data between platforms, or doing direct hardware access. thus, there are several sets of headers providing platform independent exact width types. the c standard library provides stdint.h; this was introduced in c99 and c++11.


== syntax ==
literals for integers can be written as regular arabic numerals, consisting of a sequence of digits and with negation indicated by a minus sign before the value. however, most programming languages disallow use of commas or spaces for digit grouping. examples of integer literals are:

42
10000
-233000there are several alternate methods for writing integer literals in many programming languages:

most programming languages, especially those influenced by c, prefix an integer literal with 0x or 0x to represent a hexadecimal value, e.g. 0xdeadbeef. other languages may use a different notation, e.g. some assembly languages append an h or h to the end of a hexadecimal value.
perl, ruby, java, julia, d, rust and python (starting from version 3.6) allow embedded underscores for clarity, e.g. 10_000_000, and fixed-form fortran ignores embedded spaces in integer literals.
in c and c++, a leading zero indicates an octal value, e.g. 0755. this was primarily intended to be used with unix modes; however, it has been criticized because normal integers may also lead with zero. as such, python, ruby, haskell, and ocaml prefix octal values with 0o or 0o, following the layout used by hexadecimal values.
several languages, including java, c#, scala, python, ruby, and ocaml, can represent binary values by prefixing a number with 0b or 0b.


== see also ==
arbitrary-precision arithmetic
binary-coded decimal (bcd)
c data types
integer overflow
signed number representations


== notes ==


== references ==
polling, or polled operation, in computer science, refers to actively sampling the status of an external device by a client program as a synchronous activity. polling is most often used in terms of input/output (i/o), and is also referred to as polled i/o or software-driven i/o.


== description ==
polling is the process where the computer or controlling device waits for an external device to check for its readiness or state, often with low-level hardware. for example, when a printer is connected via a parallel port, the computer waits until the printer has received the next character. these processes can be as minute as only reading one bit. this is sometimes used synonymously with 'busy-wait' polling. in this situation, when an i/o operation is required, the computer does nothing other than check the status of the i/o device until it is ready, at which point the device is accessed. in other words, the computer waits until the device is ready. polling also refers to the situation where a device is repeatedly checked for readiness, and if it is not, the computer returns to a different task. although not as wasteful of cpu cycles as busy waiting, this is generally not as efficient as the alternative to polling, interrupt-driven i/o.
in a simple single-purpose system, even busy-wait is perfectly appropriate if no action is possible until the i/o access, but more often than not this was traditionally a consequence of simple hardware or non-multitasking operating systems.
polling is often intimately involved with very low-level hardware. for example, polling a parallel printer port to check whether it is ready for another character involves examining as little as one bit of a byte. that bit represents, at the time of reading, whether a single wire in the printer cable is at low or high voltage. the i/o instruction that reads this byte directly transfers the voltage state of eight real world wires to the eight circuits (flip flops) that make up one byte of a cpu register.
polling has the disadvantage that if there are too many devices to check, the time required to poll them can exceed the time available to service the i/o device.


=== algorithm ===
polling can be described in the following steps:
host actions:

the host repeatedly reads the busy bit of the controller until it becomes clear (with a value of 0).
when clear, the host writes the command into the command register. if the host is sending output, it sets the write bit and writes a byte into the data-out register. if the host is receiving input, it reads the controller-written data from the data-in register, and sets the read bit to 0 as the next command.
the host sets the command-ready bit to 1.controller actions:

when the controller notices that the command-ready bit is set, it sets the busy bit to 1.
the controller reads the command register. if the write bit inside is set, it reads from the data-out register and performs the necessary i/o operations on the device. if the read bit is set, data from the device is loaded into the data-in register for the host to read.
once the operations are over, the controller clears the command-ready bit, clears the error bit to show the operation was successful, and clears the busy bit.


== types ==
a polling cycle is the time in which each element is monitored once. the optimal polling cycle will vary according to several factors, including the desired speed of response and the overhead (e.g., processor time and bandwidth) of the polling.
in roll call polling, the polling device or process queries each element on a list in a fixed sequence. because it waits for a response from each element, a timing mechanism is necessary to prevent lock-ups caused by non-responding elements. roll call polling can be inefficient if the overhead for the polling messages is high, there are numerous elements to be polled in each polling cycle and only a few elements are active.
in hub polling, also referred to as token polling, each element polls the next element in some fixed sequence. this continues until the first element is reached, at which time the polling cycle starts all over again.
polling can be employed in various computing contexts in order to control the execution or transmission sequence of the elements involved. for example, in multitasking operating systems, polling can be used to allocate processor time and other resources to the various competing processes.
in networks, polling is used to determine which nodes want to access the network. it is also used by routing protocols to retrieve routing information, as is the case with egp (exterior gateway protocol).
an alternative to polling is the use of interrupts, which are signals generated by devices or processes to indicate that they need attention, want to communicate, etc. although polling can be very simple, in many situations (e.g., multitasking operating systems) it is more efficient to use interrupts because it can reduce processor usage and/or bandwidth consumption.


== poll message ==
a poll message is a control-acknowledgment message.
in a multidrop line arrangement (a central computer and different terminals in which the terminals share a single communication line to and from the computer), the system uses a master/slave polling arrangement whereby the central computer sends message (called polling message) to a specific terminal on the outgoing line. all terminals listen to the outgoing line, but only the terminal that is polled replies by sending any information that it has ready for transmission on the incoming line.in star networks, which, in its simplest form, consists of one central switch, hub, or computer that acts as a conduit to transmit messages, polling is not required to avoid chaos on the lines, but it is often used to allow the master to acquire input in an orderly fashion. these poll messages differ from those of the multidrop lines case because there are no site addresses needed, and each terminal only receives those polls that are directed to it.


== see also ==
abstraction (computer science)
asynchronous i/o
bit banging
infinite loop
interrupt request (pc architecture)
integer (computer science)
kqueue
multiple asynchronous periodic polling
pull technology
select (unix)


== references ==
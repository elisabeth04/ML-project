spiking neural networks (snns) are artificial neural networks that more closely mimic natural neural networks. in addition to neuronal and synaptic state, snns incorporate the concept of time into their operating model. the idea is that neurons in the snn do not transmit information at each propagation cycle (as it happens with typical multi-layer perceptron networks), but rather transmit information only when a membrane potential – an intrinsic quality of the neuron related to its membrane electrical charge – reaches a specific value, called the threshold. when the membrane potential reaches the threshold, the neuron fires, and generates a signal that travels to other neurons which, in turn, increase or decrease their potentials in response to this signal. a neuron model  that fires at the moment of threshold crossing is also called a spiking neuron model.the most prominent spiking neuron model is the leaky integrate-and-fire model. in the integrate-and-fire model, the momentary activation level (modeled as a differential equation) is normally considered to be the neuron's state, with incoming spikes pushing this value higher or lower, until the state eventually either decays or  - if the firing threshold is reached - the neuron fires. after firing the state variable is reset to a lower value.
various decoding methods exist for interpreting the outgoing spike train as a real-value number, relying on either the frequency of spikes (rate-code), the time-to-first-spike after stimulation, or the interval between spikes.


== history ==

many multi-layer artificial neural networks are fully connected, receiving input from every neuron in the previous layer and signalling every neuron in the subsequent layer. although these networks have achieved breakthroughs in many fields, they are biologically inaccurate and do not mimic the operation mechanism of neurons in the brain of a living thing.

the biologically-inspired hodgkin–huxley model of a spiking neuron was proposed  in 1952. this model describes how action potentials are initiated and propagated. communication between neurons, which requires the exchange of chemical neurotransmitters in the synaptic gap, is described in various models, such as the integrate-and-fire model, fitzhugh–nagumo model (1961–1962), and hindmarsh–rose model (1984). the leaky integrate-and-fire model (or a derivative) is commonly used as it is easier to compute than the hodgkin–huxley model.brainchip holdings ltd announced on 21 october 2021 that it was taking orders for its akida ai processor development kits, making it the world's first commercially available neuromorphic processor operating on a spiking neural network.


== underpinnings ==
information in the brain is represented as action potentials (neuron spikes), which may be grouped into spike trains or even coordinated waves of brain activity. a fundamental question of neuroscience is to determine whether neurons communicate by a rate or temporal code. temporal coding suggests that a single spiking neuron can replace hundreds of hidden units on a sigmoidal neural net.an snn computes in the continuous rather than the discrete domain. the idea is that neurons may not test for activation in every iteration of propagation (as is the case in a typical multilayer perceptron network), but only when their membrane potentials reach a certain value. when a neuron is activated, it produces a signal that is passed to connected neurons, raising or lowering their membrane potential.
in a spiking neural network, a neuron's current state is defined as its membrane potential (possibly modeled as a differential equation). an input pulse causes the membrane potential to rise for a period of time and then gradually decline. encoding schemes have been constructed to interpret these pulse sequences as a number, taking into account both pulse frequency and pulse interval. a neural network model based on pulse generation time can be established. using the exact time of pulse occurrence, a neural network can employ more information and offer better computing properties.
the snn approach produces a continuous output instead of the binary output of traditional anns. pulse trains are not easily interpretable, hence the need for encoding schemes as above. however, a pulse train representation may be more suited for processing spatiotemporal data (or continual real-world sensory data classification). snns consider space by connecting neurons only to nearby neurons so that they process input blocks separately (similar to cnn using filters). they consider time by encoding information as pulse trains so as not to lose information in a binary encoding. this avoids the additional complexity of a recurrent neural network (rnn). it turns out that impulse neurons are more powerful computational units than traditional artificial neurons.snns are theoretically more powerful than second-generation networks[term undefined: what are 2nd-gen networks?]; however, snn training issues and hardware requirements limit their use. although unsupervised biologically-inspired learning methods are available such as hebbian learning and stdp, no effective supervised training method is suitable for snns that can provide better performance than second-generation networks. spike-based activation of snns is not differentiable thus making it hard to develop gradient descent based training methods to perform error backpropagation, though a few recent algorithms such as normad and multilayer normad have demonstrated good training performance through suitable approximation of the gradient of spike based activation.
snns have much larger computational costs for simulating realistic neural models than traditional anns.pulse-coupled neural networks (pcnn) are often confused with snns. a pcnn can be seen as a kind of snn.
currently there are a few challenges when using snns that researchers are actively working on. the first challenge concerns the nondifferentiability of the spiking nonlinearity. the expressions for both the forward- and backward-learning methods contain the derivative of the neural activation function which is non-differentiable because neuron's output is either 1 when it spikes, and 0 otherwise. this all-or-nothing behavior of the binary spiking nonlinearity stops gradients from “flowing” and makes lif neurons unsuitable for gradient-based optimization. the second challenge concerns the implementation of the optimization algorithm itself. standard bp can be expensive in terms of computation, memory, and communication and may be poorly suited to the constraints dictated by the hardware that implements it (e.g., a computer, brain, or neuromorphic device).  regarding the first challenge there are several approached in order to overcome it. a few of them are:

resorting to entirely biologically inspired local learning rules for the hidden units
translating conventionally trained “rate-based” nns to snns
smoothing the network model to be continuously differentiable
defining an sg (surogate gradient) as a continuous relaxation of the real gradients


== applications ==
snns can in principle apply to the same applications as traditional anns. in addition, snns can model the central nervous system of biological organisms, such as an insect seeking food without prior knowledge of the environment. due to their relative realism, they can be used to study the operation of biological neural circuits. starting with a hypothesis about the topology of a biological neuronal circuit and its function, recordings of this circuit can be compared to the output of the corresponding snn, evaluating the plausibility of the hypothesis. however, there is a lack of effective training mechanisms for snns, which can be inhibitory for some applications, including computer vision tasks.
as of 2019 snns lag behind anns in terms of accuracy, but the gap is decreasing, and has vanished on some tasks.when using snns for image based data we need to convert static images into binary spike trains coding. types of encodings:  
temporal coding generates one spike per neuron in which spike latency is inversely proportional to the pixel intensity.
rate coding converts pixel intensity into a spike train where the number of spikes is proportional to the pixel intensity.
direct coding uses a trainable layer to generate float value for each time-step. we have a learnable layer which converts each pixel at certain time step in float number and then threshold is used on the generated floating numbers to see if they will be 1 or 0.
phase coding encodes temporal information into spike patterns based on a global oscillator.
burst coding transmits the burst of spikes in a small-time duration, increasing the reliability of synaptic communication between neurons.currently there are two classification data sets  for snns to be used as a reference for future performance comparisons of spiking neural networks. so far mnist data transformed into spikes has been used, but it had designer choices which weren’t universally agreed on. for rate based encoding networks, mnist can be used, but the capabilities of snn go beyond rate encoding.  

the first data set is called  the heidelberg spiking dataset. the hd dataset consists of approximately 10k high-quality recordings of spoken digits ranging from zero to nine in english and german language. in total 12 speakers were included, six of which were female and six male. the speaker ages ranged from 21yr to 56yr with a mean of 29yr. recorded around 40 digit sequences for each language with a total digit count of 10 420. the digits were acquired in sequences of ten successive digits. recordings were performed in a sound-shielded room at the heidelberg university hospital with three microphones. digitized by a steinberg mr816 csx audio interface, recordings were made in wave format with a sample rate of 48 khz and 24 bit precision.  to separate the data into training and test sets,  two speakers were held out exclusively for the test set. the remainder of the test set was filled with samples (5% of the trials) from speakers also present in the training set. this division allows one to assess a trained network’s ability to generalize across speakers. 
the second dataset is called the speech commands. the sc data set is composed of 1s wave-files with 16 khz sample rate containing a single english word each. it is published under creative commons by 4.0 license and contains words spoken by 1864 speakers. in this study, we considered version 0.02 with 105 829 audio files, in which a total of 24 single word commands (yes, no, up, down, left, right, on, off, stop, go, backward, forward , follow, learn, zero, one, two, three, four, five, six, seven, eight, nine) were repeated about five times per speaker, whereas ten auxiliary words (bed, bird, cat, dog, happy, house, marvin, sheila, tree, and wow ) were only repeated approximately once. partitioning into training, testing, and validation data set was done by a hashing function as described in [43]. for all our purposes, we applied a 30 ms hann window to the start and end of each waveform. most importantly, throughout this article, we consider top one classification performance on all 35 different classes which is more difficult than the originally proposed key-word spotting task on only a subset of 12 classes (ten key-words, unknown word, and silence). however, the data can still be used in the originally intended keyword spotting way. 


== software ==
a diverse range of application software can simulate snns. this software can be classified according to its uses:


=== snn simulation ===
 these simulate complex neural models with a high level of detail and accuracy. large networks usually require lengthy processing. candidates include:bindsnet – developed by the biologically inspired neural and dynamical systems (binds) lab at the university of massachusetts amherst.
brian – developed by romain brette and dan goodman at the école normale supérieure;
genesis (the general neural simulation system) – developed in james bower's laboratory at caltech;
nest – developed by the nest initiative;
neuron – mainly developed by michael hines, john w. moore and ted carnevale in yale university and duke university;
norse – a deep learning library for biological neurons built on pytorch that integrates with neuromorphic hardware. norse is developed at heidelberg university and kth royal institute of technology;
snntorch - gradient-based deep and online learning based on pytorch developed by jason k. eshraghian in university of michigan and university of western australia;
spyketorch - a framework based on pytorch optimized specifically for convolutional snns with at most one spike per neuron. runs on gpus.


== hardware ==

future neuromorphic architectures will comprise billions of such nanosynapses, which require a clear understanding of the physical mechanisms responsible for plasticity. experimental systems based on ferroelectric tunnel junctions have been used to show that stdp can be harnessed from heterogeneous polarization switching. through combined scanning probe imaging, electrical transport and atomic-scale molecular dynamics, conductance variations can be modelled by nucleation-dominated reversal of domains. simulations show that arrays of ferroelectric nanosynapses can autonomously learn to recognize patterns in a predictable way, opening the path towards unsupervised learning.

brainchip's akida nsoc claims to have effectively 1.2 million neurons and 10 billion synapses
neurogrid is a board that can simulate spiking neural networks directly in hardware. (stanford university)
spinnaker (spiking neural network architecture) uses arm processors as the building blocks of a massively parallel computing platform based on a six-layer thalamocortical model. (university of manchester) the spinnaker system is based on numerical models running in real time on custom digital multicore chips using the arm architecture. it provides custom digital chips, each with eighteen cores and a shared local 128 mbyte ram, with a total of over 1,000,000 cores. a single chip can simulate 16,000 neurons with eight million plastic synapses running in real time.
truenorth is a processor that contains 5.4 billion transistors that consumes only 70 milliwatts; most processors in personal computers contain about 1.4 billion transistors and require 35 watts or more. ibm refers to the design principle behind truenorth as neuromorphic computing. its primary purpose is pattern recognition. while critics say the chip isn't powerful enough, its supporters point out that this is only the first generation, and the capabilities of improved iterations will become clear. (ibm)
dynamic neuromorphic asynchronous processor (dynap) combines slow, low-power, inhomogeneous sub-threshold analog circuits, and fast programmable digital circuits. it supports reconfigurable, general-purpose, real-time neural networks of spiking neurons. this allows the implementation of real-time spike-based neural processing architectures in which memory and computation are co-localized. it solves the von neumann bottleneck problem and enables real-time multiplexed communication of spiking events for realising massive networks. recurrent networks, feed-forward networks, convolutional networks, attractor networks, echo-state networks, deep networks, and sensor fusion networks are a few of the possibilities.
loihi is a 14-nm intel chip that offers 128 cores and 130,000 neurons on a 60-mm package. it integrates a wide range of features, such as hierarchical connectivity, dendritic compartments, synaptic delays and programmable synaptic learning rules. running a spiking convolutional form of the locally competitive algorithm, loihi can solve lasso optimization problems with over three orders of magnitude superior energy-delay product compared to conventional solvers running on a cpu isoprocess/voltage/area. a 64 loihi research system offers 8-million-neuron neuromorphic system. loihi is about 1,000 times as fast as a cpu and 10,000 times as energy efficient.
brainscales is based on physical emulations of neuron, synapse and plasticity models with digital connectivity, running up to ten thousand times faster than real time. it was developed by the european human brain project. the brainscales system contains 20 8-inch silicon wafers in 180 nm process technology. each wafer incorporates 50 x 106 plastic synapses and 200,000 biologically realistic neurons. the system does not execute pre-programmed code but evolves according to the physical properties of the electronic devices, running at up to 10 thousand times faster than real time.


== benchmarks ==
classification capabilities of spiking networks trained according to unsupervised learning methods have been tested on the common benchmark datasets, such as, iris, wisconsin breast cancer or statlog landsat dataset. various approaches to information encoding and network design have been used. for example, a 2-layer feedforward network for data clustering and classification. based on the idea proposed in hopfield (1995) the authors implemented models of local receptive fields combining the properties of radial basis functions (rbf) and spiking neurons to convert input signals (classified data) having a floating-point representation into a spiking representation.


== see also ==
codi
cognitive architecture
cognitive map
cognitive computer
computational neuroscience
neural coding
neural correlate
neural decoding
neuroethology
neuroinformatics
models of neural computation
motion perception
systems neuroscience


== references ==


== external links ==
full text of the book spiking neuron models. single neurons, populations, plasticity by wulfram gerstner and werner m. kistler (isbn 0-521-89079-9)